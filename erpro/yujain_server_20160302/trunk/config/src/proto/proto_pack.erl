%% Author: caochuncheng2002@gmail.com
%% Created: 2015-09-23
%% Description: proto pack erl
%% This file is generated by script tool,Do not edit it.

-module (proto_pack).

-compile([export_all]).

-include("all_pb.hrl").
-include("mm_define.hrl").

-define( LIST(L),(if L =:= undefined -> []; true -> L end )).
-define( TOINT(I),(if is_integer(I) -> I; is_float(I) -> round(I); I==undefined -> 0; true -> throw({bad_type_for_int,I,R}) end )).
-define( TOINT2(I),(if is_integer(I) -> I; is_float(I) -> round(I); I==undefined -> 0; true -> throw({bad_type_for_int,I}) end )).
-define( PACK_LONG(N),(?TOINT(element(N,R))):64/integer-signed ).
-define( PACK_INT(N),(?TOINT(element(N,R))):32/integer-signed ).
-define( PACK_SHORT(N),(?TOINT(element(N,R))):16/integer-signed ).
-define( PACK_BYTE(N),(?TOINT(element(N,R))):8/integer-signed ).
-define( PACK_BOOL(N),(if(element(N,R)) -> 1; true -> 0 end):8/integer-signed ).
-define( PACK_STR(N),(pack_string( element(N,R) ))/binary ).
-define( PACK_FLOAT(N),(?TOINT(element(N,R))):64/big-float ).
-define( PACK_LIST(N,T),(length(?LIST(element(N,R)))):16,(pack_list(T, ?LIST(element(N,R))))/binary).
-define( PACK_TYPE(N,T),(pack(T, element(N,R)))/binary ).

%% common proto 
pack(_, undefined) ->
    <<0:8/integer-signed>>;
pack(p_key_value, R) ->
    <<1:8/integer-signed,?PACK_INT(2),?PACK_LIST(3,int32)>>;
pack(p_key_value2, R) ->
    <<1:8/integer-signed,?PACK_INT(2),?PACK_INT(3)>>;
pack(p_chat_role, R) ->
    <<1:8/integer-signed,?PACK_LONG(2),?PACK_STR(3),?PACK_BYTE(4),?PACK_SHORT(5)>>;
pack(p_chat_title, R) ->
    <<1:8/integer-signed,?PACK_STR(2),?PACK_STR(3)>>;
pack(p_title, R) ->
    <<1:8/integer-signed,?PACK_INT(2)>>;
pack(p_pos, R) ->
    <<1:8/integer-signed,?PACK_INT(2),?PACK_INT(3)>>;
pack(p_map_tile, R) ->
    <<1:8/integer-signed,?PACK_INT(2),?PACK_INT(3),?PACK_BYTE(4)>>;
pack(p_map_pos, R) ->
    <<1:8/integer-signed,?PACK_INT(2),?PACK_INT(3),?PACK_INT(4),?PACK_INT(5)>>;
pack(p_attr, R) ->
    <<1:8/integer-signed,?PACK_LONG(2),?PACK_SHORT(3),?PACK_LONG(4),?PACK_STR(5)>>;
pack(p_role_info, R) ->
    <<1:8/integer-signed,?PACK_LONG(2),?PACK_STR(3),?PACK_BYTE(4),?PACK_TYPE(5,p_skin),?PACK_BYTE(6),?PACK_BYTE(7),?PACK_SHORT(8),?PACK_LONG(9),?PACK_STR(10)>>;
pack(p_role_base, R) ->
    <<1:8/integer-signed,?PACK_LONG(2),?PACK_SHORT(3),?PACK_STR(4),?PACK_STR(5),?PACK_STR(6),?PACK_BYTE(7),?PACK_BYTE(8),?PACK_INT(9),?PACK_BYTE(10),?PACK_TYPE(11,p_skin),?PACK_BYTE(12),?PACK_BYTE(13),?PACK_LONG(14),?PACK_LONG(15),?PACK_SHORT(16),?PACK_LONG(17),?PACK_STR(18),?PACK_LONG(19),?PACK_STR(20),?PACK_INT(21),?PACK_BYTE(22),?PACK_LONG(23),?PACK_LONG(24),?PACK_LONG(25),?PACK_LONG(26),?PACK_INT(27),?PACK_INT(28),?PACK_STR(29),?PACK_STR(30),?PACK_STR(31),?PACK_INT(32),?PACK_INT(33),?PACK_INT(34),?PACK_INT(35)>>;
pack(p_role_attr, R) ->
    <<1:8/integer-signed,?PACK_LONG(2),?PACK_INT(3),?PACK_INT(4),?PACK_INT(5),?PACK_INT(6),?PACK_INT(7),?PACK_INT(8),?PACK_INT(9),?PACK_INT(10),?PACK_INT(11),?PACK_INT(12),?PACK_INT(13),?PACK_TYPE(14,p_fight_attr)>>;
pack(p_fight_attr, R) ->
    <<1:8/integer-signed,?PACK_INT(2),?PACK_INT(3),?PACK_INT(4),?PACK_INT(5),?PACK_INT(6),?PACK_INT(7),?PACK_INT(8),?PACK_INT(9),?PACK_INT(10),?PACK_INT(11),?PACK_INT(12),?PACK_INT(13),?PACK_INT(14),?PACK_INT(15),?PACK_INT(16),?PACK_INT(17),?PACK_INT(18),?PACK_INT(19),?PACK_INT(20),?PACK_INT(21),?PACK_INT(22),?PACK_INT(23)>>;
pack(p_role_ext, R) ->
    <<1:8/integer-signed,?PACK_LONG(2),?PACK_STR(3),?PACK_BYTE(4),?PACK_STR(5),?PACK_INT(6),?PACK_INT(7),?PACK_INT(8),?PACK_INT(9),?PACK_INT(10),?PACK_STR(11),?PACK_STR(12),?PACK_STR(13),?PACK_STR(14)>>;
pack(p_role, R) ->
    <<1:8/integer-signed,?PACK_TYPE(2,p_role_base),?PACK_TYPE(3,p_role_attr),?PACK_BYTE(4),?PACK_LIST(5,int16)>>;
pack(p_bag_content, R) ->
    <<1:8/integer-signed,?PACK_BYTE(2),?PACK_LIST(3,p_goods),?PACK_SHORT(4)>>;
pack(p_skin, R) ->
    <<1:8/integer-signed,?PACK_INT(2),?PACK_INT(3),?PACK_INT(4)>>;
pack(p_map_role, R) ->
    <<1:8/integer-signed,?PACK_LONG(2),?PACK_STR(3),?PACK_TYPE(4,p_skin),?PACK_BYTE(5),?PACK_SHORT(6),?PACK_BYTE(7),?PACK_BYTE(8),?PACK_LONG(9),?PACK_STR(10),?PACK_INT(11),?PACK_TYPE(12,p_pos),?PACK_TYPE(13,p_pos),?PACK_BYTE(14),?PACK_INT(15),?PACK_INT(16),?PACK_INT(17),?PACK_BYTE(18),?PACK_LIST(19,int16),?PACK_TYPE(20,p_actor_skill_state)>>;
pack(p_attack_result, R) ->
    <<1:8/integer-signed,?PACK_LONG(2),?PACK_BYTE(3),?PACK_INT(4),?PACK_INT(5),?PACK_INT(6),?PACK_LIST(7,p_attack_result_unit)>>;
pack(p_attack_result_unit, R) ->
    <<1:8/integer-signed,?PACK_INT(2),?PACK_INT(3),?PACK_BYTE(4)>>;
pack(p_attack_result_buff, R) ->
    <<1:8/integer-signed,?PACK_INT(2),?PACK_INT(3),?PACK_SHORT(4)>>;
pack(p_actor_skill, R) ->
    <<1:8/integer-signed,?PACK_INT(2),?PACK_SHORT(3)>>;
pack(p_actor_buff, R) ->
    <<1:8/integer-signed,?PACK_SHORT(2),?PACK_INT(3)>>;
pack(p_role_pet, R) ->
    <<1:8/integer-signed,?PACK_LONG(2),?PACK_INT(3),?PACK_INT(4),?PACK_INT(5),?PACK_INT(6)>>;
pack(p_pet_tiny, R) ->
    <<1:8/integer-signed,?PACK_LONG(2),?PACK_STR(3),?PACK_INT(4),?PACK_BYTE(5)>>;
pack(p_pet, R) ->
    <<1:8/integer-signed,?PACK_LONG(2),?PACK_LONG(3),?PACK_STR(4),?PACK_INT(5),?PACK_BYTE(6),?PACK_BYTE(7),?PACK_INT(8),?PACK_INT(9),?PACK_LONG(10),?PACK_LONG(11),?PACK_SHORT(12),?PACK_INT(13),?PACK_INT(14),?PACK_INT(15),?PACK_INT(16),?PACK_INT(17),?PACK_INT(18),?PACK_INT(19),?PACK_INT(20),?PACK_INT(21),?PACK_INT(22),?PACK_INT(23),?PACK_INT(24),?PACK_INT(25),?PACK_INT(26),?PACK_INT(27),?PACK_INT(28),?PACK_INT(29),?PACK_INT(30),?PACK_INT(31),?PACK_INT(32),?PACK_INT(33),?PACK_INT(34),?PACK_INT(35),?PACK_TYPE(36,p_fight_attr),?PACK_LIST(37,p_actor_skill),?PACK_BYTE(38),?PACK_LIST(39,int16)>>;
pack(p_map_pet, R) ->
    <<1:8/integer-signed,?PACK_LONG(2),?PACK_STR(3),?PACK_LONG(4),?PACK_INT(5),?PACK_SHORT(6),?PACK_TYPE(7,p_pos),?PACK_TYPE(8,p_pos),?PACK_BYTE(9),?PACK_INT(10),?PACK_INT(11),?PACK_INT(12),?PACK_BYTE(13),?PACK_LIST(14,int16),?PACK_TYPE(15,p_actor_skill_state)>>;
pack(p_map_monster, R) ->
    <<1:8/integer-signed,?PACK_LONG(2),?PACK_STR(3),?PACK_INT(4),?PACK_SHORT(5),?PACK_BYTE(6),?PACK_TYPE(7,p_pos),?PACK_BYTE(8),?PACK_TYPE(9,p_pos),?PACK_INT(10),?PACK_INT(11),?PACK_INT(12),?PACK_BYTE(13),?PACK_LIST(14,int16),?PACK_TYPE(15,p_actor_skill_state)>>;
pack(p_actor_skill_state, R) ->
    <<1:8/integer-signed,?PACK_INT(2),?PACK_SHORT(3),?PACK_LONG(4),?PACK_BYTE(5),?PACK_LIST(6,p_pos)>>;
pack(p_map_avatar, R) ->
    <<1:8/integer-signed,?PACK_LONG(2),?PACK_LONG(3),?PACK_STR(4),?PACK_LONG(5),?PACK_STR(6),?PACK_TYPE(7,p_pos),?PACK_TYPE(8,p_skin)>>;
pack(p_tiny_goods, R) ->
    <<1:8/integer-signed,?PACK_LONG(2),?PACK_BYTE(3),?PACK_BYTE(4),?PACK_INT(5),?PACK_SHORT(6)>>;
pack(p_goods, R) ->
    <<1:8/integer-signed,?PACK_LONG(2),?PACK_BYTE(3),?PACK_BYTE(4),?PACK_INT(5),?PACK_LONG(6),?PACK_SHORT(7),?PACK_BYTE(8),?PACK_SHORT(9),?PACK_SHORT(10),?PACK_BYTE(11),?PACK_INT(12),?PACK_INT(13),?PACK_INT(14),?PACK_INT(15),?PACK_BYTE(16),?PACK_LIST(17,p_equip_stone),?PACK_INT(18),?PACK_BYTE(19),?PACK_LIST(20,p_attribute)>>;
pack(p_attribute, R) ->
    <<1:8/integer-signed,?PACK_BYTE(2),?PACK_INT(3)>>;
pack(p_equip_stone, R) ->
    <<1:8/integer-signed,?PACK_INT(2),?PACK_BYTE(3)>>;
pack(p_letter_info, R) ->
    <<1:8/integer-signed,?PACK_INT(2),?PACK_STR(3),?PACK_STR(4),?PACK_STR(5),?PACK_INT(6),?PACK_BYTE(7),?PACK_LIST(8,p_goods),?PACK_BYTE(9),?PACK_STR(10),?PACK_BOOL(11)>>;
pack(p_letter_simple_info, R) ->
    <<1:8/integer-signed,?PACK_INT(2),?PACK_STR(3),?PACK_STR(4),?PACK_STR(5),?PACK_INT(6),?PACK_INT(7),?PACK_INT(8),?PACK_BOOL(9),?PACK_BOOL(10)>>;
pack(p_mission_info, R) ->
    <<1:8/integer-signed,?PACK_INT(2),?PACK_BYTE(3),?PACK_BYTE(4),?PACK_SHORT(5),?PACK_SHORT(6),?PACK_BYTE(7),?PACK_LIST(8,p_mission_listener)>>;
pack(p_mission_listener, R) ->
    <<1:8/integer-signed,?PACK_BYTE(2),?PACK_SHORT(3),?PACK_INT(4),?PACK_INT(5),?PACK_INT(6)>>;
pack(p_mission_reward, R) ->
    <<1:8/integer-signed,?PACK_LONG(2),?PACK_LONG(3),?PACK_LONG(4),?PACK_LIST(5,p_goods)>>;
pack(p_mission_auto, R) ->
    <<1:8/integer-signed,?PACK_INT(2),?PACK_INT(3),?PACK_SHORT(4),?PACK_SHORT(5),?PACK_SHORT(6),?PACK_BYTE(7),?PACK_INT(8),?PACK_INT(9),?PACK_BYTE(10),?PACK_BYTE(11),?PACK_BYTE(12)>>;
pack(p_customer_service, R) ->
    <<1:8/integer-signed,?PACK_INT(2),?PACK_INT(3),?PACK_BYTE(4),?PACK_STR(5),?PACK_STR(6),?PACK_INT(7),?PACK_BYTE(8)>>;
pack(p_family, R) ->
    <<1:8/integer-signed,?PACK_LONG(2),?PACK_STR(3),?PACK_LONG(4),?PACK_STR(5),?PACK_BYTE(6),?PACK_SHORT(7),?PACK_INT(8),?PACK_SHORT(9),?PACK_SHORT(10),?PACK_BYTE(11),?PACK_LONG(12),?PACK_STR(13),?PACK_STR(14),?PACK_STR(15),?PACK_LIST(16,p_family_member),?PACK_LIST(17,p_family_request)>>;
pack(p_family_member, R) ->
    <<1:8/integer-signed,?PACK_LONG(2),?PACK_STR(3),?PACK_BYTE(4),?PACK_SHORT(5),?PACK_INT(6),?PACK_BYTE(7),?PACK_INT(8),?PACK_LONG(9),?PACK_LONG(10),?PACK_STR(11)>>;
pack(p_family_request, R) ->
    <<1:8/integer-signed,?PACK_LONG(2),?PACK_STR(3),?PACK_SHORT(4),?PACK_INT(5)>>;
pack(p_family_list, R) ->
    <<1:8/integer-signed,?PACK_LONG(2),?PACK_STR(3),?PACK_LONG(4),?PACK_STR(5),?PACK_BYTE(6),?PACK_SHORT(7),?PACK_SHORT(8),?PACK_SHORT(9),?PACK_LONG(10),?PACK_STR(11)>>;
pack(p_rank_row, R) ->
    <<1:8/integer-signed,?PACK_INT(2),?PACK_LONG(3),?PACK_STR(4),?PACK_LIST(5,string),?PACK_LIST(6,int32)>>;
pack(p_role_skill, R) ->
    <<1:8/integer-signed,?PACK_INT(2),?PACK_INT(3)>>;
pack(p_fb, R) ->
    <<1:8/integer-signed,?PACK_SHORT(2),?PACK_SHORT(3)>>;
pack(p_team_member, R) ->
    <<1:8/integer-signed,?PACK_LONG(2),?PACK_STR(3),?PACK_BYTE(4),?PACK_BYTE(5),?PACK_BYTE(6),?PACK_SHORT(7),?PACK_LONG(8),?PACK_BYTE(9),?PACK_BYTE(10),?PACK_INT(11),?PACK_INT(12),?PACK_INT(13),?PACK_SHORT(14),?PACK_INT(15),?PACK_INT(16),?PACK_TYPE(17,p_skin)>>;
pack(_, _) ->
    <<>>.


%% toc proto
pack_toc(m_auth_key_toc, R) ->
    <<?PACK_INT(2),?PACK_LONG(3),?PACK_BOOL(4),?PACK_TYPE(5,p_role),?PACK_SHORT(6),?PACK_LIST(7,p_attr),?PACK_STR(8)>>;
pack_toc(m_auth_quick_toc, R) ->
    <<?PACK_INT(2),?PACK_LONG(3),?PACK_TYPE(4,p_role),?PACK_SHORT(5),?PACK_LIST(6,p_attr),?PACK_STR(7)>>;
pack_toc(m_role_create_toc, R) ->
    <<?PACK_INT(2),?PACK_STR(3)>>;
pack_toc(m_role_online_info_toc, R) ->
    <<?PACK_LIST(2,byte)>>;
pack_toc(m_map_enter_toc, R) ->
    <<?PACK_INT(2),?PACK_STR(3),?PACK_TYPE(4,p_pos),?PACK_SHORT(5)>>;
pack_toc(m_map_slice_enter_toc, R) ->
    <<?PACK_LIST(2,p_map_role),?PACK_LIST(3,int64),?PACK_LIST(4,p_map_pet),?PACK_LIST(5,int64),?PACK_LIST(6,p_map_monster),?PACK_LIST(7,int32),?PACK_LIST(8,p_map_avatar),?PACK_LIST(9,int32)>>;
pack_toc(m_map_update_mapinfo_toc, R) ->
    <<?PACK_LONG(2),?PACK_BYTE(3),?PACK_TYPE(4,p_map_role)>>;
pack_toc(m_map_actor_dead_toc, R) ->
    <<?PACK_LONG(2),?PACK_BYTE(3),?PACK_LONG(4),?PACK_BYTE(5)>>;
pack_toc(m_map_slice_quit_toc, R) ->
    <<?PACK_BYTE(2),?PACK_LIST(3,int64)>>;
pack_toc(m_map_quit_toc, R) ->
    <<?PACK_LONG(2)>>;
pack_toc(m_map_query_toc, R) ->
    <<?PACK_BYTE(2),?PACK_BYTE(3),?PACK_INT(4),?PACK_LIST(5,p_map_role),?PACK_LIST(6,p_map_pet),?PACK_LIST(7,p_map_monster)>>;
pack_toc(m_map_change_map_toc, R) ->
    <<?PACK_INT(2),?PACK_SHORT(3),?PACK_INT(4),?PACK_INT(5)>>;
pack_toc(m_move_walk_path_toc, R) ->
    <<?PACK_INT(2),?PACK_LONG(3),?PACK_TYPE(4,p_pos)>>;
pack_toc(m_move_sync_toc, R) ->
    <<?PACK_LONG(2),?PACK_TYPE(3,p_pos)>>;
pack_toc(m_system_heartbeat_toc, R) ->
    <<?PACK_LONG(2),?PACK_LONG(3)>>;
pack_toc(m_system_error_toc, R) ->
    <<?PACK_INT(2),?PACK_STR(3)>>;
pack_toc(m_system_message_toc, R) ->
    <<?PACK_INT(2),?PACK_STR(3)>>;
pack_toc(m_system_fcm_toc, R) ->
    <<?PACK_STR(2),?PACK_INT(3),?PACK_INT(4)>>;
pack_toc(m_system_need_fcm_toc, R) ->
    <<?PACK_INT(2)>>;
pack_toc(m_system_set_fcm_toc, R) ->
    <<?PACK_BOOL(2),?PACK_STR(3)>>;
pack_toc(m_system_config_update_toc, R) ->
    <<?PACK_INT(2),?PACK_LIST(3,p_key_value)>>;
pack_toc(m_goods_query_toc, R) ->
    <<?PACK_BYTE(2),?PACK_LONG(3),?PACK_BYTE(4),?PACK_LONG(5),?PACK_INT(6),?PACK_LIST(7,p_goods),?PACK_SHORT(8)>>;
pack_toc(m_goods_swap_toc, R) ->
    <<?PACK_INT(2),?PACK_LONG(3),?PACK_BYTE(4),?PACK_SHORT(5),?PACK_BYTE(6),?PACK_TYPE(7,p_goods),?PACK_TYPE(8,p_goods)>>;
pack_toc(m_goods_tidy_toc, R) ->
    <<?PACK_INT(2),?PACK_BYTE(3),?PACK_LIST(4,p_goods)>>;
pack_toc(m_goods_divide_toc, R) ->
    <<?PACK_LONG(2),?PACK_SHORT(3),?PACK_SHORT(4),?PACK_BYTE(5),?PACK_INT(6),?PACK_TYPE(7,p_goods),?PACK_TYPE(8,p_goods)>>;
pack_toc(m_goods_destroy_toc, R) ->
    <<?PACK_BYTE(2),?PACK_BYTE(3),?PACK_LIST(4,int64),?PACK_INT(5)>>;
pack_toc(m_goods_update_toc, R) ->
    <<?PACK_BYTE(2),?PACK_LIST(3,p_goods),?PACK_LIST(4,int64)>>;
pack_toc(m_goods_show_toc, R) ->
    <<?PACK_INT(2)>>;
pack_toc(m_goods_use_toc, R) ->
    <<?PACK_BYTE(2),?PACK_LONG(3),?PACK_SHORT(4),?PACK_LONG(5),?PACK_INT(6),?PACK_STR(7),?PACK_SHORT(8)>>;
pack_toc(m_goods_add_grid_toc, R) ->
    <<?PACK_BYTE(2),?PACK_BYTE(3),?PACK_SHORT(4),?PACK_INT(5),?PACK_SHORT(6)>>;
pack_toc(m_role_attr_change_toc, R) ->
    <<?PACK_BYTE(2),?PACK_LIST(3,p_attr)>>;
pack_toc(m_role_get_info_toc, R) ->
    <<?PACK_BYTE(2),?PACK_LONG(3),?PACK_INT(4),?PACK_TYPE(5,p_role_info)>>;
pack_toc(m_role_get_skill_toc, R) ->
    <<?PACK_LIST(2,p_role_skill)>>;
pack_toc(m_role_relive_toc, R) ->
    <<?PACK_INT(2),?PACK_LONG(3),?PACK_INT(4)>>;
pack_toc(m_role_set_toc, R) ->
    <<?PACK_BYTE(2),?PACK_LIST(3,p_attr),?PACK_INT(4)>>;
pack_toc(m_role_cure_toc, R) ->
    <<?PACK_INT(2)>>;
pack_toc(m_pet_query_toc, R) ->
    <<?PACK_BYTE(2),?PACK_INT(3),?PACK_LIST(4,p_pet_tiny),?PACK_TYPE(5,p_pet),?PACK_TYPE(6,p_role_pet)>>;
pack_toc(m_pet_battle_toc, R) ->
    <<?PACK_INT(2),?PACK_LONG(3),?PACK_TYPE(4,p_pet)>>;
pack_toc(m_pet_back_toc, R) ->
    <<?PACK_INT(2)>>;
pack_toc(m_pet_free_toc, R) ->
    <<?PACK_INT(2)>>;
pack_toc(m_fight_chant_toc, R) ->
    <<?PACK_LONG(2),?PACK_BYTE(3),?PACK_INT(4),?PACK_BYTE(5),?PACK_LIST(6,p_pos)>>;
pack_toc(m_fight_action_toc, R) ->
    <<?PACK_LONG(2),?PACK_BYTE(3),?PACK_INT(4),?PACK_TYPE(5,p_pos),?PACK_BYTE(6),?PACK_LIST(7,p_pos)>>;
pack_toc(m_fight_attack_toc, R) ->
    <<?PACK_INT(2),?PACK_INT(3),?PACK_SHORT(4),?PACK_BYTE(5),?PACK_LONG(6),?PACK_BYTE(7),?PACK_LONG(8),?PACK_BYTE(9),?PACK_TYPE(10,p_pos),?PACK_BYTE(11),?PACK_LIST(12,p_attack_result)>>;
pack_toc(m_fight_buff_toc, R) ->
    <<?PACK_LONG(2),?PACK_BYTE(3),?PACK_INT(4),?PACK_LIST(5,p_attack_result_buff)>>;
pack_toc(m_buff_add_toc, R) ->
    <<?PACK_LONG(2),?PACK_BYTE(3),?PACK_LIST(4,p_actor_buff)>>;
pack_toc(m_buff_update_toc, R) ->
    <<?PACK_LONG(2),?PACK_BYTE(3),?PACK_LIST(4,p_actor_buff)>>;
pack_toc(m_buff_del_toc, R) ->
    <<?PACK_LONG(2),?PACK_BYTE(3),?PACK_LIST(4,int32)>>;
pack_toc(m_letter_get_toc, R) ->
    <<?PACK_LIST(2,p_letter_simple_info)>>;
pack_toc(m_letter_open_toc, R) ->
    <<?PACK_INT(2),?PACK_STR(3),?PACK_TYPE(4,p_letter_info)>>;
pack_toc(m_letter_send_toc, R) ->
    <<?PACK_INT(2),?PACK_STR(3),?PACK_TYPE(4,p_letter_simple_info)>>;
pack_toc(m_letter_delete_toc, R) ->
    <<?PACK_INT(2),?PACK_STR(3),?PACK_LIST(4,int32)>>;
pack_toc(m_letter_accept_goods_toc, R) ->
    <<?PACK_INT(2),?PACK_STR(3),?PACK_INT(4),?PACK_LONG(5),?PACK_SHORT(6)>>;
pack_toc(m_mission_query_toc, R) ->
    <<?PACK_BYTE(2),?PACK_LIST(3,int32),?PACK_INT(4),?PACK_STR(5),?PACK_LIST(6,p_mission_info)>>;
pack_toc(m_mission_do_toc, R) ->
    <<?PACK_BYTE(2),?PACK_INT(3),?PACK_INT(4),?PACK_LIST(5,int32),?PACK_INT(6),?PACK_STR(7),?PACK_INT(8),?PACK_INT(9),?PACK_TYPE(10,p_mission_reward)>>;
pack_toc(m_mission_do_complete_toc, R) ->
    <<?PACK_INT(2),?PACK_INT(3),?PACK_INT(4),?PACK_INT(5)>>;
pack_toc(m_mission_do_submit_toc, R) ->
    <<?PACK_INT(2),?PACK_SHORT(3),?PACK_INT(4),?PACK_BYTE(5),?PACK_INT(6)>>;
pack_toc(m_mission_cancel_toc, R) ->
    <<?PACK_INT(2),?PACK_INT(3),?PACK_STR(4)>>;
pack_toc(m_mission_update_toc, R) ->
    <<?PACK_LIST(2,int32),?PACK_LIST(3,p_mission_info)>>;
pack_toc(m_mission_recolor_toc, R) ->
    <<?PACK_BYTE(2),?PACK_INT(3),?PACK_BYTE(4),?PACK_INT(5),?PACK_BYTE(6),?PACK_INT(7),?PACK_INT(8),?PACK_INT(9)>>;
pack_toc(m_mission_auto_toc, R) ->
    <<?PACK_BYTE(2),?PACK_INT(3),?PACK_SHORT(4),?PACK_INT(5),?PACK_LIST(6,p_mission_auto),?PACK_TYPE(7,p_mission_auto),?PACK_TYPE(8,p_mission_reward)>>;
pack_toc(m_role_add_exp_toc, R) ->
    <<?PACK_INT(2),?PACK_LONG(3),?PACK_BYTE(4),?PACK_LONG(5),?PACK_SHORT(6),?PACK_SHORT(7)>>;
pack_toc(m_role_level_up_toc, R) ->
    <<?PACK_INT(2),?PACK_LONG(3),?PACK_BYTE(4),?PACK_LONG(5),?PACK_SHORT(6),?PACK_SHORT(7)>>;
pack_toc(m_customer_service_query_toc, R) ->
    <<?PACK_BYTE(2),?PACK_INT(3),?PACK_INT(4),?PACK_LIST(5,p_customer_service)>>;
pack_toc(m_customer_service_do_toc, R) ->
    <<?PACK_BYTE(2),?PACK_BYTE(3),?PACK_INT(4),?PACK_INT(5),?PACK_INT(6)>>;
pack_toc(m_customer_service_update_toc, R) ->
    <<?PACK_BYTE(2),?PACK_TYPE(3,p_customer_service)>>;
pack_toc(m_customer_service_del_toc, R) ->
    <<?PACK_BYTE(2),?PACK_INT(3),?PACK_LIST(4,int32),?PACK_INT(5)>>;
pack_toc(m_family_query_toc, R) ->
    <<?PACK_BYTE(2),?PACK_BYTE(3),?PACK_SHORT(4),?PACK_SHORT(5),?PACK_BYTE(6),?PACK_INT(7),?PACK_LIST(8,p_family_list)>>;
pack_toc(m_family_get_toc, R) ->
    <<?PACK_BYTE(2),?PACK_LONG(3),?PACK_INT(4),?PACK_TYPE(5,p_family)>>;
pack_toc(m_family_create_toc, R) ->
    <<?PACK_BYTE(2),?PACK_STR(3),?PACK_BYTE(4),?PACK_INT(5),?PACK_TYPE(6,p_family)>>;
pack_toc(m_family_request_toc, R) ->
    <<?PACK_LONG(2),?PACK_INT(3),?PACK_LONG(4),?PACK_TYPE(5,p_family_request),?PACK_LIST(6,int64)>>;
pack_toc(m_family_invite_toc, R) ->
    <<?PACK_BYTE(2),?PACK_LONG(3),?PACK_LONG(4),?PACK_INT(5),?PACK_STR(6),?PACK_LONG(7),?PACK_STR(8)>>;
pack_toc(m_family_accept_toc, R) ->
    <<?PACK_BYTE(2),?PACK_LONG(3),?PACK_INT(4),?PACK_LONG(5),?PACK_LIST(6,p_family_member),?PACK_LIST(7,p_attr),?PACK_LIST(8,int64)>>;
pack_toc(m_family_refuse_toc, R) ->
    <<?PACK_BYTE(2),?PACK_LONG(3),?PACK_INT(4),?PACK_LIST(5,int64)>>;
pack_toc(m_family_disband_toc, R) ->
    <<?PACK_INT(2)>>;
pack_toc(m_family_fire_toc, R) ->
    <<?PACK_LONG(2),?PACK_INT(3),?PACK_STR(4),?PACK_LIST(5,p_attr)>>;
pack_toc(m_family_leave_toc, R) ->
    <<?PACK_INT(2),?PACK_LONG(3),?PACK_STR(4),?PACK_LIST(5,p_attr)>>;
pack_toc(m_family_attr_change_toc, R) ->
    <<?PACK_BYTE(2),?PACK_LONG(3),?PACK_LONG(4),?PACK_LIST(5,p_attr)>>;
pack_toc(m_family_set_toc, R) ->
    <<?PACK_BYTE(2),?PACK_LONG(3),?PACK_LONG(4),?PACK_INT(5)>>;
pack_toc(m_family_turn_toc, R) ->
    <<?PACK_LONG(2),?PACK_INT(3),?PACK_STR(4),?PACK_LIST(5,p_attr)>>;
pack_toc(m_ranking_get_toc, R) ->
    <<?PACK_INT(2),?PACK_LIST(3,p_rank_row)>>;
pack_toc(m_fb_enter_toc, R) ->
    <<?PACK_INT(2),?PACK_SHORT(3),?PACK_SHORT(4)>>;
pack_toc(m_fb_quit_toc, R) ->
    <<?PACK_INT(2)>>;
pack_toc(m_fb_done_toc, R) ->
    <<?PACK_SHORT(2),?PACK_BYTE(3),?PACK_BYTE(4)>>;
pack_toc(m_fb_query_toc, R) ->
    <<?PACK_INT(2),?PACK_LIST(3,p_fb)>>;
pack_toc(m_fb_update_toc, R) ->
    <<?PACK_LIST(2,p_fb)>>;
pack_toc(m_fb_monster_toc, R) ->
    <<?PACK_INT(2),?PACK_BYTE(3),?PACK_LIST(4,p_pos)>>;
pack_toc(m_chat_get_goods_toc, R) ->
    <<?PACK_INT(2),?PACK_TYPE(3,p_goods)>>;
pack_toc(m_chat_join_channel_toc, R) ->
    <<?PACK_BYTE(2)>>;
pack_toc(m_chat_leave_channel_toc, R) ->
    <<?PACK_BYTE(2)>>;
pack_toc(m_chat_in_channel_toc, R) ->
    <<?PACK_BYTE(2),?PACK_STR(3),?PACK_INT(4),?PACK_TYPE(5,p_chat_role),?PACK_INT(6),?PACK_INT(7),?PACK_BYTE(8)>>;
pack_toc(m_broadcast_general_toc, R) ->
    <<?PACK_BYTE(2),?PACK_BYTE(3),?PACK_STR(4)>>;
pack_toc(m_team_create_toc, R) ->
    <<?PACK_INT(2),?PACK_INT(3),?PACK_SHORT(4)>>;
pack_toc(m_team_invite_toc, R) ->
    <<?PACK_INT(2)>>;
pack_toc(m_team_apply_toc, R) ->
    <<?PACK_INT(2)>>;
pack_toc(m_team_accept_toc, R) ->
    <<?PACK_INT(2)>>;
pack_toc(m_team_leave_toc, R) ->
    <<?PACK_INT(2)>>;
pack_toc(m_team_kick_toc, R) ->
    <<?PACK_INT(2)>>;
pack_toc(m_team_disband_toc, R) ->
    <<?PACK_INT(2)>>;
pack_toc(m_team_appoint_toc, R) ->
    <<?PACK_INT(2)>>;
pack_toc(m_team_sync_toc, R) ->
    <<?PACK_BYTE(2),?PACK_LIST(3,p_team_member),?PACK_SHORT(4)>>;
pack_toc(_, _) ->
    <<>>.


%% base function
pack_string(Data) ->
    Binary = if
                 Data =:= undefined -> <<>> ;
                 is_list(Data)      -> list_to_binary(Data);
                 is_integer(Data)   -> list_to_binary(integer_to_list(Data));
                 is_atom(Data)      -> atom_to_binary(Data,latin1);
                 is_tuple(Data)     -> list_to_binary(tuple_to_list(Data));
                 is_bitstring(Data) -> list_to_binary(bitstring_to_list(Data));
                 true               -> Data
             end,
    <<(size(Binary)):16,Binary/binary>>.
    
pack_list(Type, List) ->
    lists:foldl(fun
                   (Data, Acc) ->
                        case Type of
                            bool ->
                                <<Acc/binary,(if(Data) -> 1; true -> 0 end):8/integer-signed>>;
                            int64 ->
                                <<Acc/binary,?TOINT2(Data):64/integer-signed>>;
                            int32 ->
                                <<Acc/binary,?TOINT2(Data):32/integer-signed>>;
                            int16 ->
                                <<Acc/binary,?TOINT2(Data):16/integer-signed>>;
                            byte ->
                                <<Acc/binary,?TOINT2(Data):8/integer-signed>>;
                            double ->
                                <<Acc/binary,?TOINT2(Data):64/big-float>>;
                            string ->
                                <<Acc/binary,(pack_string( Data ))/binary>>;
                            _ ->
                                <<Acc/binary,(pack(Type, Data))/binary>>
                        end
                end, <<>>, List).