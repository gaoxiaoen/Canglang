%% Author: caochuncheng2002@gmail.com
%% Created: 2015-09-23
%% Description: proto pack erl
%% This file is generated by script tool,Do not edit it.

-module (proto_unpack).

-compile([export_all]).

-include("all_pb.hrl").
-include("mm_define.hrl").

-define( FLOAT(F), (if is_float(F) -> trunc(F); true -> F end)).
-define( STRING(Str), (if is_list(Str) -> Str; is_binary(Str) -> binary_to_list(Str); true -> Str end)).
-define( UNPACK_REC(TypeList,Rec), unpack_record(TypeList, B, 2, Rec) ).
-define( UNPACKTOS_REC(TypeList,Rec), element(1, unpack_record(TypeList, B, 2, Rec))).


%% common proto 
unpack(p_key_value, B) ->
    ?UNPACK_REC([int32,{repeated,int32}], #p_key_value{});
unpack(p_key_value2, B) ->
    ?UNPACK_REC([int32,int32], #p_key_value2{});
unpack(p_chat_role, B) ->
    ?UNPACK_REC([int64,string,byte,int16], #p_chat_role{});
unpack(p_chat_title, B) ->
    ?UNPACK_REC([string,string], #p_chat_title{});
unpack(p_title, B) ->
    ?UNPACK_REC([int32], #p_title{});
unpack(p_pos, B) ->
    ?UNPACK_REC([int32,int32], #p_pos{});
unpack(p_map_tile, B) ->
    ?UNPACK_REC([int32,int32,byte], #p_map_tile{});
unpack(p_map_pos, B) ->
    ?UNPACK_REC([int32,int32,int32,int32], #p_map_pos{});
unpack(p_attr, B) ->
    ?UNPACK_REC([int64,int16,int64,string], #p_attr{});
unpack(p_role_info, B) ->
    ?UNPACK_REC([int64,string,byte,p_skin,byte,byte,int16,int64,string], #p_role_info{});
unpack(p_role_base, B) ->
    ?UNPACK_REC([int64,int16,string,string,string,byte,byte,int32,byte,p_skin,byte,byte,int64,int64,int16,int64,string,int64,string,int32,byte,int64,int64,int64,int64,int32,int32,string,string,string,int32,int32,int32,int32], #p_role_base{});
unpack(p_role_attr, B) ->
    ?UNPACK_REC([int64,int32,int32,int32,int32,int32,int32,int32,int32,int32,int32,int32,p_fight_attr], #p_role_attr{});
unpack(p_fight_attr, B) ->
    ?UNPACK_REC([int32,int32,int32,int32,int32,int32,int32,int32,int32,int32,int32,int32,int32,int32,int32,int32,int32,int32,int32,int32,int32,int32], #p_fight_attr{});
unpack(p_role_ext, B) ->
    ?UNPACK_REC([int64,string,byte,string,int32,int32,int32,int32,int32,string,string,string,string], #p_role_ext{});
unpack(p_role, B) ->
    ?UNPACK_REC([p_role_base,p_role_attr,byte,{repeated,int16}], #p_role{});
unpack(p_bag_content, B) ->
    ?UNPACK_REC([byte,{repeated,p_goods},int16], #p_bag_content{});
unpack(p_skin, B) ->
    ?UNPACK_REC([int32,int32,int32], #p_skin{});
unpack(p_map_role, B) ->
    ?UNPACK_REC([int64,string,p_skin,byte,int16,byte,byte,int64,string,int32,p_pos,p_pos,byte,int32,int32,int32,byte,{repeated,int16},p_actor_skill_state], #p_map_role{});
unpack(p_attack_result, B) ->
    ?UNPACK_REC([int64,byte,int32,int32,int32,{repeated,p_attack_result_unit}], #p_attack_result{});
unpack(p_attack_result_unit, B) ->
    ?UNPACK_REC([int32,int32,byte], #p_attack_result_unit{});
unpack(p_attack_result_buff, B) ->
    ?UNPACK_REC([int32,int32,int16], #p_attack_result_buff{});
unpack(p_actor_skill, B) ->
    ?UNPACK_REC([int32,int16], #p_actor_skill{});
unpack(p_actor_buff, B) ->
    ?UNPACK_REC([int16,int32], #p_actor_buff{});
unpack(p_role_pet, B) ->
    ?UNPACK_REC([int64,int32,int32,int32,int32], #p_role_pet{});
unpack(p_pet_tiny, B) ->
    ?UNPACK_REC([int64,string,int32,byte], #p_pet_tiny{});
unpack(p_pet, B) ->
    ?UNPACK_REC([int64,int64,string,int32,byte,byte,int32,int32,int64,int64,int16,int32,int32,int32,int32,int32,int32,int32,int32,int32,int32,int32,int32,int32,int32,int32,int32,int32,int32,int32,int32,int32,int32,int32,p_fight_attr,{repeated,p_actor_skill},byte,{repeated,int16}], #p_pet{});
unpack(p_map_pet, B) ->
    ?UNPACK_REC([int64,string,int64,int32,int16,p_pos,p_pos,byte,int32,int32,int32,byte,{repeated,int16},p_actor_skill_state], #p_map_pet{});
unpack(p_map_monster, B) ->
    ?UNPACK_REC([int64,string,int32,int16,byte,p_pos,byte,p_pos,int32,int32,int32,byte,{repeated,int16},p_actor_skill_state], #p_map_monster{});
unpack(p_actor_skill_state, B) ->
    ?UNPACK_REC([int32,int16,int64,byte,{repeated,p_pos}], #p_actor_skill_state{});
unpack(p_map_avatar, B) ->
    ?UNPACK_REC([int64,int64,string,int64,string,p_pos,p_skin], #p_map_avatar{});
unpack(p_tiny_goods, B) ->
    ?UNPACK_REC([int64,byte,byte,int32,int16], #p_tiny_goods{});
unpack(p_goods, B) ->
    ?UNPACK_REC([int64,byte,byte,int32,int64,int16,byte,int16,int16,byte,int32,int32,int32,int32,byte,{repeated,p_equip_stone},int32,byte,{repeated,p_attribute}], #p_goods{});
unpack(p_attribute, B) ->
    ?UNPACK_REC([byte,int32], #p_attribute{});
unpack(p_equip_stone, B) ->
    ?UNPACK_REC([int32,byte], #p_equip_stone{});
unpack(p_letter_info, B) ->
    ?UNPACK_REC([int32,string,string,string,int32,byte,{repeated,p_goods},byte,string,bool], #p_letter_info{});
unpack(p_letter_simple_info, B) ->
    ?UNPACK_REC([int32,string,string,string,int32,int32,int32,bool,bool], #p_letter_simple_info{});
unpack(p_mission_info, B) ->
    ?UNPACK_REC([int32,byte,byte,int16,int16,byte,{repeated,p_mission_listener}], #p_mission_info{});
unpack(p_mission_listener, B) ->
    ?UNPACK_REC([byte,int16,int32,int32,int32], #p_mission_listener{});
unpack(p_mission_reward, B) ->
    ?UNPACK_REC([int64,int64,int64,{repeated,p_goods}], #p_mission_reward{});
unpack(p_mission_auto, B) ->
    ?UNPACK_REC([int32,int32,int16,int16,int16,byte,int32,int32,byte,byte,byte], #p_mission_auto{});
unpack(p_customer_service, B) ->
    ?UNPACK_REC([int32,int32,byte,string,string,int32,byte], #p_customer_service{});
unpack(p_family, B) ->
    ?UNPACK_REC([int64,string,int64,string,byte,int16,int32,int16,int16,byte,int64,string,string,string,{repeated,p_family_member},{repeated,p_family_request}], #p_family{});
unpack(p_family_member, B) ->
    ?UNPACK_REC([int64,string,byte,int16,int32,byte,int32,int64,int64,string], #p_family_member{});
unpack(p_family_request, B) ->
    ?UNPACK_REC([int64,string,int16,int32], #p_family_request{});
unpack(p_family_list, B) ->
    ?UNPACK_REC([int64,string,int64,string,byte,int16,int16,int16,int64,string], #p_family_list{});
unpack(p_rank_row, B) ->
    ?UNPACK_REC([int32,int64,string,{repeated,string},{repeated,int32}], #p_rank_row{});
unpack(p_role_skill, B) ->
    ?UNPACK_REC([int32,int32], #p_role_skill{});
unpack(p_fb, B) ->
    ?UNPACK_REC([int16,int16], #p_fb{});
unpack(p_team_member, B) ->
    ?UNPACK_REC([int64,string,byte,byte,byte,int16,int64,byte,byte,int32,int32,int32,int16,int32,int32,p_skin], #p_team_member{});
unpack(RecordTag, _Bin) ->
    throw({illegal_record_tag, RecordTag}).



%% tos proto
unpack_tos(?AUTH_KEY, B) ->
    ?UNPACKTOS_REC([string,string,int64,string,int32,byte,int16,string], #m_auth_key_tos{});
unpack_tos(?AUTH_QUICK, B) ->
    ?UNPACKTOS_REC([string,string,int64,byte,int16,string,string], #m_auth_quick_tos{});
unpack_tos(?ROLE_CREATE, B) ->
    ?UNPACKTOS_REC([string,string,int16,byte,int32,byte,byte,int16], #m_role_create_tos{});
unpack_tos(?MAP_ENTER, B) ->
    ?UNPACKTOS_REC([int16], #m_map_enter_tos{});
unpack_tos(?MAP_ENTER_CONFIRM, B) ->
    ?UNPACKTOS_REC([], #m_map_enter_confirm_tos{});
unpack_tos(?MAP_UPDATE_MAPINFO, B) ->
    ?UNPACKTOS_REC([int64,byte,int16], #m_map_update_mapinfo_tos{});
unpack_tos(?MAP_QUERY, B) ->
    ?UNPACKTOS_REC([byte,byte], #m_map_query_tos{});
unpack_tos(?MAP_CHANGE_MAP, B) ->
    ?UNPACKTOS_REC([int16], #m_map_change_map_tos{});
unpack_tos(?MOVE_WALK_PATH, B) ->
    ?UNPACKTOS_REC([byte,p_pos], #m_move_walk_path_tos{});
unpack_tos(?MOVE_WALK, B) ->
    ?UNPACKTOS_REC([byte,byte,p_pos], #m_move_walk_tos{});
unpack_tos(?MOVE_SYNC, B) ->
    ?UNPACKTOS_REC([byte,int64,p_pos], #m_move_sync_tos{});
unpack_tos(?SYSTEM_HEARTBEAT, B) ->
    ?UNPACKTOS_REC([int64], #m_system_heartbeat_tos{});
unpack_tos(?SYSTEM_SET_FCM, B) ->
    ?UNPACKTOS_REC([string,string], #m_system_set_fcm_tos{});
unpack_tos(?SYSTEM_GM, B) ->
    ?UNPACKTOS_REC([string], #m_system_gm_tos{});
unpack_tos(?SYSTEM_CONFIG_UPDATE, B) ->
    ?UNPACKTOS_REC([{repeated,p_key_value}], #m_system_config_update_tos{});
unpack_tos(?GOODS_QUERY, B) ->
    ?UNPACKTOS_REC([byte,int64,byte,int64], #m_goods_query_tos{});
unpack_tos(?GOODS_SWAP, B) ->
    ?UNPACKTOS_REC([int64,byte,int16,byte], #m_goods_swap_tos{});
unpack_tos(?GOODS_TIDY, B) ->
    ?UNPACKTOS_REC([byte], #m_goods_tidy_tos{});
unpack_tos(?GOODS_DIVIDE, B) ->
    ?UNPACKTOS_REC([int64,int16,int16,byte], #m_goods_divide_tos{});
unpack_tos(?GOODS_DESTROY, B) ->
    ?UNPACKTOS_REC([byte,{repeated,int64},byte], #m_goods_destroy_tos{});
unpack_tos(?GOODS_SHOW, B) ->
    ?UNPACKTOS_REC([byte,string,byte,int64,int64], #m_goods_show_tos{});
unpack_tos(?GOODS_USE, B) ->
    ?UNPACKTOS_REC([byte,int64,int16,int64], #m_goods_use_tos{});
unpack_tos(?GOODS_ADD_GRID, B) ->
    ?UNPACKTOS_REC([byte,byte,int16], #m_goods_add_grid_tos{});
unpack_tos(?ROLE_GET_INFO, B) ->
    ?UNPACKTOS_REC([byte,int64], #m_role_get_info_tos{});
unpack_tos(?ROLE_GET_SKILL, B) ->
    ?UNPACKTOS_REC([], #m_role_get_skill_tos{});
unpack_tos(?ROLE_RELIVE, B) ->
    ?UNPACKTOS_REC([byte], #m_role_relive_tos{});
unpack_tos(?ROLE_SET, B) ->
    ?UNPACKTOS_REC([byte,{repeated,p_attr}], #m_role_set_tos{});
unpack_tos(?ROLE_CURE, B) ->
    ?UNPACKTOS_REC([byte], #m_role_cure_tos{});
unpack_tos(?PET_QUERY, B) ->
    ?UNPACKTOS_REC([byte,int64], #m_pet_query_tos{});
unpack_tos(?PET_BATTLE, B) ->
    ?UNPACKTOS_REC([int64], #m_pet_battle_tos{});
unpack_tos(?PET_BACK, B) ->
    ?UNPACKTOS_REC([], #m_pet_back_tos{});
unpack_tos(?PET_FREE, B) ->
    ?UNPACKTOS_REC([int64,byte], #m_pet_free_tos{});
unpack_tos(?FIGHT_ATTACK, B) ->
    ?UNPACKTOS_REC([int32,byte,int64,byte,int64,byte,p_pos], #m_fight_attack_tos{});
unpack_tos(?LETTER_GET, B) ->
    ?UNPACKTOS_REC([], #m_letter_get_tos{});
unpack_tos(?LETTER_OPEN, B) ->
    ?UNPACKTOS_REC([int32], #m_letter_open_tos{});
unpack_tos(?LETTER_P2P_SEND, B) ->
    ?UNPACKTOS_REC([string,string,{repeated,int64}], #m_letter_p2p_send_tos{});
unpack_tos(?LETTER_DELETE, B) ->
    ?UNPACKTOS_REC([{repeated,int32}], #m_letter_delete_tos{});
unpack_tos(?LETTER_ACCEPT_GOODS, B) ->
    ?UNPACKTOS_REC([int32,int64], #m_letter_accept_goods_tos{});
unpack_tos(?MISSION_QUERY, B) ->
    ?UNPACKTOS_REC([byte,{repeated,int32}], #m_mission_query_tos{});
unpack_tos(?MISSION_DO, B) ->
    ?UNPACKTOS_REC([byte,int32,int32,{repeated,int32}], #m_mission_do_tos{});
unpack_tos(?MISSION_DO_COMPLETE, B) ->
    ?UNPACKTOS_REC([int32], #m_mission_do_complete_tos{});
unpack_tos(?MISSION_DO_SUBMIT, B) ->
    ?UNPACKTOS_REC([int32,int16], #m_mission_do_submit_tos{});
unpack_tos(?MISSION_CANCEL, B) ->
    ?UNPACKTOS_REC([int32], #m_mission_cancel_tos{});
unpack_tos(?MISSION_RECOLOR, B) ->
    ?UNPACKTOS_REC([byte,int32,byte], #m_mission_recolor_tos{});
unpack_tos(?MISSION_AUTO, B) ->
    ?UNPACKTOS_REC([byte,int32,int16], #m_mission_auto_tos{});
unpack_tos(?CUSTOMER_SERVICE_QUERY, B) ->
    ?UNPACKTOS_REC([byte,int32], #m_customer_service_query_tos{});
unpack_tos(?CUSTOMER_SERVICE_DO, B) ->
    ?UNPACKTOS_REC([byte,byte,string,string,int32], #m_customer_service_do_tos{});
unpack_tos(?CUSTOMER_SERVICE_DEL, B) ->
    ?UNPACKTOS_REC([byte,int32,{repeated,int32}], #m_customer_service_del_tos{});
unpack_tos(?FAMILY_QUERY, B) ->
    ?UNPACKTOS_REC([byte,byte,int16,int16,byte,string], #m_family_query_tos{});
unpack_tos(?FAMILY_GET, B) ->
    ?UNPACKTOS_REC([byte,int64], #m_family_get_tos{});
unpack_tos(?FAMILY_CREATE, B) ->
    ?UNPACKTOS_REC([byte,string,byte], #m_family_create_tos{});
unpack_tos(?FAMILY_REQUEST, B) ->
    ?UNPACKTOS_REC([int64], #m_family_request_tos{});
unpack_tos(?FAMILY_INVITE, B) ->
    ?UNPACKTOS_REC([byte,int64,int64,int64], #m_family_invite_tos{});
unpack_tos(?FAMILY_ACCEPT, B) ->
    ?UNPACKTOS_REC([byte,int64], #m_family_accept_tos{});
unpack_tos(?FAMILY_REFUSE, B) ->
    ?UNPACKTOS_REC([byte,int64], #m_family_refuse_tos{});
unpack_tos(?FAMILY_DISBAND, B) ->
    ?UNPACKTOS_REC([], #m_family_disband_tos{});
unpack_tos(?FAMILY_FIRE, B) ->
    ?UNPACKTOS_REC([int64], #m_family_fire_tos{});
unpack_tos(?FAMILY_LEAVE, B) ->
    ?UNPACKTOS_REC([], #m_family_leave_tos{});
unpack_tos(?FAMILY_SET, B) ->
    ?UNPACKTOS_REC([byte,int64,int64,string], #m_family_set_tos{});
unpack_tos(?FAMILY_TURN, B) ->
    ?UNPACKTOS_REC([int64], #m_family_turn_tos{});
unpack_tos(?RANKING_GET, B) ->
    ?UNPACKTOS_REC([int32], #m_ranking_get_tos{});
unpack_tos(?FB_ENTER, B) ->
    ?UNPACKTOS_REC([int16], #m_fb_enter_tos{});
unpack_tos(?FB_QUIT, B) ->
    ?UNPACKTOS_REC([int16], #m_fb_quit_tos{});
unpack_tos(?FB_QUERY, B) ->
    ?UNPACKTOS_REC([int16], #m_fb_query_tos{});
unpack_tos(?FB_UPDATE, B) ->
    ?UNPACKTOS_REC([], #m_fb_update_tos{});
unpack_tos(?FB_MONSTER, B) ->
    ?UNPACKTOS_REC([], #m_fb_monster_tos{});
unpack_tos(?CHAT_GET_GOODS, B) ->
    ?UNPACKTOS_REC([int64], #m_chat_get_goods_tos{});
unpack_tos(?CHAT_IN_CHANNEL, B) ->
    ?UNPACKTOS_REC([byte,string,int32,byte], #m_chat_in_channel_tos{});
unpack_tos(?TEAM_CREATE, B) ->
    ?UNPACKTOS_REC([], #m_team_create_tos{});
unpack_tos(?TEAM_INVITE, B) ->
    ?UNPACKTOS_REC([int64], #m_team_invite_tos{});
unpack_tos(?TEAM_APPLY, B) ->
    ?UNPACKTOS_REC([int64,int32], #m_team_apply_tos{});
unpack_tos(?TEAM_ACCEPT, B) ->
    ?UNPACKTOS_REC([int64], #m_team_accept_tos{});
unpack_tos(?TEAM_REFUSE, B) ->
    ?UNPACKTOS_REC([int32], #m_team_refuse_tos{});
unpack_tos(?TEAM_LEAVE, B) ->
    ?UNPACKTOS_REC([], #m_team_leave_tos{});
unpack_tos(?TEAM_KICK, B) ->
    ?UNPACKTOS_REC([int64], #m_team_kick_tos{});
unpack_tos(?TEAM_DISBAND, B) ->
    ?UNPACKTOS_REC([], #m_team_disband_tos{});
unpack_tos(?TEAM_APPOINT, B) ->
    ?UNPACKTOS_REC([int64], #m_team_appoint_tos{});
unpack_tos(MethodID, _) ->
    throw({illegal_method_id, MethodID}).


unpack_record(_, <<>>, _, Record) -> {Record, <<>>};
unpack_record([], Bin, _, Record) -> {Record, Bin};
unpack_record([Type|T], Bin, I, Record) ->
    case Type of
        bool ->
            <<Val2:8/integer-signed, Rem/binary>> = Bin,
            Val = Val2 > 0;
        int64 ->
            <<Val:64/integer-signed, Rem/binary>> = Bin;
        int32 ->
            <<Val:32/integer-signed, Rem/binary>> = Bin;
        int16 ->
            <<Val:16/integer-signed, Rem/binary>> = Bin;
        byte ->
            <<Val:8/integer-signed, Rem/binary>> = Bin;
        double ->
            <<Val2:64/big-float, Rem/binary>> = Bin,
			Val = ?FLOAT(Val2);
        string ->
            <<Len:16, Val2:Len/binary-unit:8, Rem/binary>> = Bin,
			Val = ?STRING(Val2);
        {repeated, Type2} ->
            <<Len:16, Rem2/binary>> = Bin,
            {Val, Rem} = unpack_list(Type2, Rem2, Len, []);
        RecTag ->
            {Val, Rem} = unpack(RecTag, Bin)
    end,
    unpack_record(T, Rem, I+1, setelement(I, Record, Val)).
    
unpack_list(_Type, <<>>, _, Result) -> {lists:reverse(Result), <<>>};
unpack_list(_Type, Bin, 0, Result) -> {lists:reverse(Result), Bin};
unpack_list(Type, Bin, Len, Result) ->
    case Type of
        bool ->
            <<Val2:8/integer-signed, Rem/binary>> = Bin,
            Val = Val2 > 0;
        int64 ->
            <<Val:64/integer-signed, Rem/binary>> = Bin;
        int32 ->
            <<Val:32/integer-signed, Rem/binary>> = Bin;
        int16 ->
            <<Val:16/integer-signed, Rem/binary>> = Bin;
        byte ->
            <<Val:8/integer-signed, Rem/binary>> = Bin;
        double ->
            <<Val2:64/big-float, Rem/binary>> = Bin,
			Val = ?FLOAT(Val2);
        string ->
            <<Len:16, Val2:Len/binary-unit:8, Rem/binary>> = Bin,
			Val = ?STRING(Val2);
        RecTag ->
            {Val, Rem} = unpack(RecTag, Bin)
    end,
    unpack_list(Type, Rem, Len-1, [Val|Result]).